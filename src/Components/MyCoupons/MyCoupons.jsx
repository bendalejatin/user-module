import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import axios from "axios";
import TabBar from "../TabBar/TabBar";
import "./MyCoupons.css";
import { jsPDF } from "jspdf";
import Navbar from "../Navbar/Navbar";

// const BASE_URL = "http://localhost:5000"; // Adjust this to your backend URL
const BASE_URL = "https://entrykart-admin.onrender.com"; // deployment url

const MyCoupons = () => {
  const [coupons, setCoupons] = useState([]);
  const [activeTab, setActiveTab] = useState("ALL COUPONS");
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const navigate = useNavigate();

  useEffect(() => {
    const fetchCoupons = async () => {
      try {
        const email = localStorage.getItem("ownerEmail");
        if (!email) {
          setError("Please log in to view your coupons.");
          setLoading(false);
          return;
        }
        const response = await axios.get(`${BASE_URL}/api/coupons/user`, {
          params: { email },
        });
        // Dynamically set status based on expiryDate
        const updatedCoupons = response.data.map((coupon) => ({
          ...coupon,
          status: new Date(coupon.expiryDate) > new Date() ? "Active" : "Expired",
        }));
        setCoupons(updatedCoupons);
        setLoading(false);
      } catch (err) {
        console.error("Error fetching coupons:", err.response || err);
        setError(
          err.response?.data?.message ||
            "Failed to fetch coupons. Please try again."
        );
        setLoading(false);
      }
    };

    fetchCoupons();
  }, []);

  const formatDate = (dateString) => {
    if (!dateString) return "N/A";
    const date = new Date(dateString);
    return `Valid till ${date.toLocaleDateString("en-US", {
      month: "short",
      day: "numeric",
      year: "numeric",
    })}`;
  };

  const handleCopyCode = (code) => {
    navigator.clipboard.writeText(code);
    alert("Coupon code copied to clipboard!");
  };

  const handleDownload = (coupon) => {
    const doc = new jsPDF();

    doc.setDrawColor(150);
    doc.setLineWidth(0.5);
    doc.setLineDash([3, 3]);
    doc.rect(10, 10, 190, 277);

    doc.setFont("helvetica", "bold");
    doc.setFontSize(20);
    doc.text("Event Coupon", 105, 25, null, null, "center");

    doc.setFont("helvetica", "bold");
    doc.setFontSize(14);
    doc.text("Scan to Redeem", 105, 40, null, null, "center");
    doc.addImage(coupon.qrCode || "", "PNG", 80, 45, 50, 50);

    doc.setLineDash([]);
    doc.setDrawColor(200);
    doc.line(15, 100, 195, 100);

    doc.setFontSize(14);
    doc.setFont("helvetica", "bold");
    doc.text("Coupon Holder", 15, 110);
    doc.setFont("helvetica", "normal");
    doc.setFontSize(12);
    doc.text(`Name: ${coupon.userName || "N/A"}`, 15, 120);
    doc.text(`Flat No: ${coupon.flatNo || "N/A"}`, 15, 128);
    doc.text(`Society: ${coupon.society?.name || "N/A"}`, 15, 136);
    doc.text(`Code: ${coupon.code || "N/A"}`, 15, 144);
    doc.text(
      `Valid Until: ${new Date(coupon.expiryDate).toDateString() || "N/A"}`,
      15,
      152
    );
    doc.text(`Status: ${coupon.status || "N/A"}`, 15, 160);

    doc.setDrawColor(200);
    doc.line(15, 168, 195, 168);

    doc.setFont("helvetica", "bold");
    doc.setFontSize(14);
    doc.text("Event Details", 15, 178);
    doc.setFont("helvetica", "normal");
    doc.setFontSize(12);
    doc.text(`Title: ${coupon.event?.title || "Event Coupon"}`, 15, 188);
    doc.text(`Date: ${formatDate(coupon.event?.date)}`, 15, 196);
    doc.text(`Time: ${coupon.event?.time || "N/A"}`, 15, 204);
    doc.text(`Venue: ${coupon.event?.location || "N/A"}`, 15, 212);

    const description = coupon.event?.description || "N/A";
    const wrappedDesc = doc.splitTextToSize(`Description: ${description}`, 180);
    doc.text(wrappedDesc, 15, 222);

    doc.setFontSize(10);
    doc.setTextColor(120);
    doc.text(
      "Generated by Event Manager | Powered by Dec Gaming Studio",
      105,
      285,
      null,
      null,
      "center"
    );

    doc.save(`${coupon.code || "coupon"}_coupon.pdf`);
  };

  const handleCardClick = (coupon) => {
    navigate(`/coupon/${coupon._id}`, { state: { coupon } });
  };

  const filteredCoupons = coupons.filter((coupon) => {
    if (activeTab === "ALL COUPONS") return true;
    if (activeTab === "Active") return coupon.status === "Active";
    if (activeTab === "Used") return coupon.status === "Expired";
    return false;
  });

  if (loading) {
    return (
      <div>
        <Navbar />
        <div className="loading">
          <h2>Loading...</h2>
        </div>
        <TabBar />
      </div>
    );
  }

  if (error) {
    return (
      <div className="coupons-container">
        <Navbar />
        <p>{error}</p>
        <TabBar />
      </div>
    );
  }

  return (
    <>
      <Navbar />
      <div className="coupons-container">
        <div className="tabs">
          <button
            className={`tab ${activeTab === "ALL COUPONS" ? "active" : ""}`}
            onClick={() => setActiveTab("ALL COUPONS")}
          >
            <span>All Coupons</span>
          </button>
          <button
            className={`tab ${activeTab === "Active" ? "active" : ""}`}
            onClick={() => setActiveTab("Active")}
          >
            <span>Active</span>
          </button>
          <button
            className={`tab ${activeTab === "Used" ? "active" : ""}`}
            onClick={() => setActiveTab("Used")}
          >
            <span>Used</span>
          </button>
        </div>

        <div className="coupons-list">
          {filteredCoupons.length === 0 ? (
            <p>No coupons available.</p>
          ) : (
            filteredCoupons.map((coupon, index) => (
              <div
                key={coupon._id}
                className={`coupon-card fade-in`}
                style={{ animationDelay: `${index * 0.1}s` }}
                onClick={() => handleCardClick(coupon)}
              >
                <div className="card-header">
                  <img
                    src={coupon.event?.image || "default-image.png"}
                    alt="Store"
                    className="store-image"
                  />
                  <div className="coupon-info">
                    <h3 className="coupon-title">{coupon.event?.title}</h3>
                  </div>
                </div>
                <div className="coupon-details">
                  <p className="society"><b>Society:</b> {coupon.society?.name}</p>
                  <p className="house-number"><b>House No:</b> {coupon.flatNo}</p>
                  <div className="code-section">
                    <span className="code">{coupon.code}</span>
                    <button
                      className="copy-button"
                      onClick={(e) => {
                        e.stopPropagation();
                        handleCopyCode(coupon.code);
                      }}
                    >
                      ðŸ“‹
                    </button>
                  </div>
                  <div className="footer-row">
                    <span className="expiry">
                      {formatDate(coupon.expiryDate) || "Valid till Jun 19, 2025"}
                    </span>
                    <button
                      className={`status-button ${
                        coupon.status === "Active" ? "active" : "expired"
                      }`}
                      onClick={(e) => {
                        e.stopPropagation();
                        handleDownload(coupon);
                      }}
                    >
                      {coupon.status || "active"}
                    </button>
                  </div>
                </div>
              </div>
            ))
          )}
        </div>
      </div>
      <TabBar />
    </>
  );
};

export default MyCoupons;